/*****************************************************************************************************************************
 * Copyright 2020 Gabriel Gheorghe. All rights reserved.
 * This code is licensed under the BSD 3-Clause "New" or "Revised" License
 * License url: https://github.com/GabyForceQ/PolluxEngine/blob/master/LICENSE
 *****************************************************************************************************************************/

#pragma once

#include "WorkerThread.hpp"

namespace Pollux::Core
{
    /*************************************************************************************************************************
     * \class Thread
     *************************************************************************************************************************/
    class Thread final
    {
    public:
        /**********************************************************************************************************************
         * \brief Default constructor
         *********************************************************************************************************************/
        Thread();
        
        /**********************************************************************************************************************
         * \brief Destructor
         *********************************************************************************************************************/
        ~Thread();

        /**********************************************************************************************************************
         * \brief Add a new job to this Thread
         * \param JobCallback for std::thread creation
         *********************************************************************************************************************/
        void AddJob(std::function<void()> JobCallback);
        
        /**********************************************************************************************************************
         * \brief Wait for all jobs to finish
         *********************************************************************************************************************/
        void Wait();

        /**********************************************************************************************************************
         * \return Worker Thread
         *********************************************************************************************************************/
        const WorkerThread& GetWorker() const noexcept;

    private:
        void QueueLoop();

        bool m_Destroying = false;
        WorkerThread m_Worker;
        std::queue<std::function<void()>> m_JobQueue;
        std::mutex m_QueueMutex;
        std::condition_variable m_Condition;
    };
}