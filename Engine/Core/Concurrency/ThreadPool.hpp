/*****************************************************************************************************************************
 * Copyright 2020 Gabriel Gheorghe. All rights reserved.
 * This code is licensed under the BSD 3-Clause "New" or "Revised" License
 * License url: https://github.com/GabyForceQ/PolluxEngine/blob/master/LICENSE
 *****************************************************************************************************************************/

#pragma once

#include "Thread.hpp"

namespace Pollux::Core
{
    /*************************************************************************************************************************
     * \class Thread Pool
     *************************************************************************************************************************/
    class ThreadPool final
    {
    public:
        /**********************************************************************************************************************
         * \brief Set the number of threads in the pool and allocate them
         * \param count represents the number of threads to be allocated
         *********************************************************************************************************************/
        void SetThreadCount(const size_t& count);

        /**********************************************************************************************************************
         * \return Number of threads in the pool
         *********************************************************************************************************************/
        const size_t& GetThreadCount() const noexcept;

        /**********************************************************************************************************************
         * \brief Wait for all threads to finish
         *********************************************************************************************************************/
        void Wait();

        /**********************************************************************************************************************
         * \brief Vector with all threads in the pool
         *********************************************************************************************************************/
        std::vector<std::unique_ptr<Thread>> m_pThreads;

    private:
        size_t m_ThreadCount = 0_sz;
    };
}