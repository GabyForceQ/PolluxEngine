/*****************************************************************************************************************************
 * Copyright 2020 Gabriel Gheorghe. All rights reserved.
 * This code is licensed under the BSD 3-Clause "New" or "Revised" License
 * License url: https://github.com/GabyForceQ/PolluxEngine/blob/master/LICENSE
 *****************************************************************************************************************************/

#pragma once

#ifdef POLLUX_DRIVER_VULKAN

namespace Pollux::Core
{
	/*************************************************************************************************************************
	 * \class Vulkan Buffer
	 *************************************************************************************************************************/
	class VulkanBuffer final
	{
	public:
		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkResult Map(VkDeviceSize size = VK_WHOLE_SIZE, VkDeviceSize offset = 0);

		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		void Unmap();

		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkResult Bind(VkDeviceSize offset = 0);

		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		void SetupDescriptor(VkDeviceSize size = VK_WHOLE_SIZE, VkDeviceSize offset = 0);

		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		void CopyTo(void* pData, VkDeviceSize size);

		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkResult Flush(VkDeviceSize size = VK_WHOLE_SIZE, VkDeviceSize offset = 0);

		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkResult Invalidate(VkDeviceSize size = VK_WHOLE_SIZE, VkDeviceSize offset = 0);

		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		void Destroy();

		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkDevice pDevice;
		
		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkBuffer pBuffer = VK_NULL_HANDLE;
		
		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkDeviceMemory pMemory = VK_NULL_HANDLE;
		
		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkDescriptorBufferInfo descriptor;
		
		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkDeviceSize size = 0u;
		
		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkDeviceSize alignment = 0u;
		
		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		void* pMapped = nullptr;

		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkBufferUsageFlags usageFlags;
		
		/*********************************************************************************************************************
		 *
		 *********************************************************************************************************************/
		VkMemoryPropertyFlags memoryPropertyFlags;
	};
}

#endif